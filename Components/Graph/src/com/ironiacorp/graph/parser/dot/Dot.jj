options{		JDK_VERSION = "1.5";		CACHE_TOKENS = true;		DEBUG_LOOKAHEAD = false;		DEBUG_PARSER = false;		DEBUG_TOKEN_MANAGER = false;		ERROR_REPORTING = false;		IGNORE_CASE = false;		SANITY_CHECK = true;		STATIC = false;		SUPPORT_CLASS_VISIBILITY_PUBLIC = false;}PARSER_BEGIN(DotParser)package br.jabuti.graph.layout.graphviz;import java.util.*;import java.util.regex.Matcher;import java.io.*;import br.jabuti.graph.view.gvf.GVFNode;import br.jabuti.graph.view.gvf.GVFLink;import br.jabuti.graph.view.gvf.BoundingBox;import br.jabuti.graph.view.gvf.Position;public class DotParser{		private Vector vnode;		private Vector vlink;		private double graphHeight = 0;		private double graphWidth = 0;		public DotParser(Vector v, Vector v2, InputStream is)		{				this (is);				if (v == null || v2 == null)				{						throw new IllegalArgumentException("No nodes or links have been supplied as argument");				}				vnode = v;				vlink = v2;		}		private GVFNode findLabel(String x)		{				if (vnode == null)				{						return null;				}				Iterator i = vnode.iterator();				while (i.hasNext())				{						GVFNode ret = (GVFNode) i.next();						;						if (x.equals(ret.getSource()))						{								return ret;						}				}				return null;		}		private GVFLink findLink(String orig, String dest)		{				if (vlink == null)				{						return null;				}				Iterator i = vlink.iterator();				while (i.hasNext())				{						GVFLink ret = (GVFLink) i.next();						if (orig.equals(ret.getSourceNode().getSource()) && dest.equals(ret.getDestinationNode().getSource()))						{								return ret;						}				}				return null;		}		private void setPositionPreCheck()		{				if (graphHeight == 0 || graphWidth == 0)				{						throw new IllegalArgumentException("The graph height and width must be set before adding nodes or links");				}		}		private void setPosition(String label, Position pos)		{				GVFNode node = findLabel(label);				if (node != null)				{						setPositionPreCheck();						node.moveTo((int) pos.getX(), (int) (graphHeight - pos.getY()));				}		}		private void setLinkPosition(String l1, String l2, List < Position > pos)		{				GVFLink link = findLink(l1, l2);				if (link == null)				{						return;				}				Iterator < Position > i = pos.iterator();				while (i.hasNext())				{						setPositionPreCheck();						Position p = i.next();						link.addPoint((int) p.getX(), (int) (graphHeight - p.getY()));				}		}		private void setBoundingBox(BoundingBox bb)		{				graphHeight = (int) bb.getHeight();				graphWidth = (int) bb.getWidth();		}}PARSER_END(DotParser)SKIP :{		" "|				"\t"|				"\n"|				"\r"|				"\f"}TOKEN :{		< GRAPH : "graph" >|				< NODE : "node" >|				< TO : "->" >|				< DIGRAPH : "digraph" >|				< POS : "pos" >|				< BBOX : "bb" >}TOKEN :{		< LPAREN : "(" >|				< RPAREN : ")" >|				< LBRACE : "{" >|				< RBRACE : "}" >|				< LBRACKET : "[" >|				< RBRACKET : "]" >|				< SEMICOLON : ";" >|				< COMMA : "," >|				< DOT : "." >|				< EQUALS : "=" >|				< QUOTE : "\"" >}TOKEN :{		< GT : ">" >|				< LT : "<" >|				< HOOK : "?" >|				< COLON : ":" >|				< EQ : "==" >|				< LE : "<=" >|				< GE : ">=" >|				< NE : "!=" >|				< PLUS : "+" >|				< MINUS : "-" >|				< STAR : "*" >|				< SLASH : "/" >|				< REM : "%" >|				< POWER : "**" >}TOKEN :{		< #LETTER : [ "A"-"Z", "_", "a"-"z" ] >|				< #DIGIT : [ "0"-"9" ] >|				< NODEIDENT : (< DIGIT >)+ >|				< IDENTIFIER :				< LETTER >				(						< LETTER >				|		< DIGIT >				)* >|				< STRING :				< QUOTE >				(						< LETTER >				|		< DIGIT >				|		"\\"				|		"."				|		","				|		" "				|		"\n"				|		"\r"				|		"-"				)+				< QUOTE > >}void parse() :{}{		< DIGRAPH > < IDENTIFIER > < LBRACE >		(				(						graphDef()				|								defaultNode()				|								LOOKAHEAD(< NODEIDENT > < TO >)						linkDef()				|								nodeDef()				)				< SEMICOLON >		)*		< RBRACE >}void defaultNode() :{}{		< NODE > atributeList()}void atributeList() :{}{		< LBRACKET > atribute()		(				< COMMA > atribute()		)*		< RBRACKET >}void atribute() :{}{		< IDENTIFIER > < EQUALS > < STRING >}void graphDef() :{		BoundingBox bb = null;}{		< GRAPH > < LBRACKET >		(				[						bb = boundingBox()						{								setBoundingBox(bb);						}				]		|						atribute()		)		(				< COMMA >				(						[								bb = boundingBox()								{										setBoundingBox(bb);								}						]				|								atribute()				)		)*		< RBRACKET >}void nodeDef() :{		Position p = null;		String l = null;		Token t = null;}{		[				t = < NODEIDENT >				{						l = t.image;				}		]		< LBRACKET >		(				atribute()		|				[						p = nodePosition()						{								setPosition(l, p);						}				]		)		(				< COMMA >				(						atribute()				|						[								p = nodePosition()								{										setPosition(l, p);								}						]				)		)*		< RBRACKET >}List < Position > linkPosition() :{		Token t = null;		List < Position > positions = new ArrayList < Position > ();}{		< POS > < EQUALS >		[				LOOKAHEAD(2)				t = < STRING >				{						String lineBreak = Matcher.quoteReplacement("\n");						String carriageReturn = Matcher.quoteReplacement("\r");						String endLineSlash = Matcher.quoteReplacement("\\");						String quote = Matcher.quoteReplacement("\"");						String token = t.image.replaceAll(lineBreak, "").replaceAll(carriageReturn, "").replaceAll(endLineSlash, "").replaceAll(quote, "").substring(2);						StringTokenizer st = new StringTokenizer(token, " ");						while (st.hasMoreTokens())						{								String s = st.nextToken();								String [ ] sps = s.split(",");								Position p = new Position(Double.valueOf(sps [ 0 ]), Double.valueOf(sps [ 1 ]));								positions.add(p);						}				}		]		{				return positions;		}}Position nodePosition() :{		Token t = null;}{		< POS > < EQUALS > t = < STRING >		{				String [ ] sps = t.image.replaceAll("\"", "").split(",");				Position p = new Position(Double.valueOf(sps [ 0 ]), Double.valueOf(sps [ 1 ]));				return p;		}}BoundingBox boundingBox() :{		Token t = null;}{		< BBOX > < EQUALS > t = < STRING >		{				BoundingBox box = null;				String [ ] values = t.image.replaceAll("\"", "").split(",");				double x = Double.valueOf(values [ 0 ]);				double y = Double.valueOf(values [ 1 ]);				double width = Double.valueOf(values [ 2 ]);				double height = Double.valueOf(values [ 3 ]);				return new BoundingBox(x, y, width, height);		}}void linkDef() :{		String s1 = null;		String s2 = null;		Token t1 = null;		Token t2 = null;		List < Position > p = null;}{		[				t1 = < NODEIDENT >				{						s1 = t1.image;				}		]		< TO >		[				t2 = < NODEIDENT >				{						s2 = t2.image;				}		]		< LBRACKET >		(				atribute()		|				[						p = linkPosition()						{								setLinkPosition(s1, s2, p);						}				]		)		(				< COMMA >				(						atribute()				|						[								p = linkPosition()								{										setLinkPosition(s1, s2, p);								}						]				)		)*		< RBRACKET >}