options
{
		JDK_VERSION = "1.5";
		CACHE_TOKENS = true;
		DEBUG_LOOKAHEAD = false;
		DEBUG_PARSER = false;
		DEBUG_TOKEN_MANAGER = false;
		ERROR_REPORTING = true;
		IGNORE_CASE = true;
		SANITY_CHECK = true;
		STATIC = false;
		SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
}

PARSER_BEGIN(DotParser)
/*
 * Copyright (C) 2011 Marco Aur√©lio Graciotto Silva <magsilva@ironiacorp.com>
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.ironiacorp.graph.parser.dot;

import java.util.*;
import com.ironiacorp.graph.model.*;

/**
 * Parser for graphs defined in the Graphviz format. Based on documentation
 * provided at:
 * - http://www.graphviz.org/doc/info/attrs.html
 * - http://www.graphviz.org/doc/info/lang.html
 */
public class DotParser
{
	public class DefaultNodePropertiesElement extends Element {};
	public class DefaultEdgePropertiesElement extends Element {};
	public class DefaultGraphPropertiesElement extends Element {};
}

PARSER_END(DotParser)

SKIP :
{
	" " | "\t" | "\n" | "\r" | "\f"
}

TOKEN :
{
	< GRAPH : "graph" >
|	< DIGRAPH : "digraph" >
|	< SUBGRAPH : "subgraph" >
|	< DEFAULT_PROPERTY_NODE : "node" >
|	< DEFAULT_PROPERTY_EDGE : "edge" >
|	< EDGE : "--" >
|	< DIRECTED_EDGE : "->" >
|	< STRICT : "strict" >
}

TOKEN :
{
	<#LETTER : [ "A"-"Z", "_", "a"-"z" ]>
|	<#DIGIT : [ "0"-"9" ]>
|	<NODEIDENT : (<DIGIT>)+>
|	<IDENTIFIER :	<LETTER>  (<LETTER>	| <DIGIT>)* >
|	<STRING :	<QUOTE> ( <LETTER> | <DIGIT> | "\\" | "." | "," | " " | "\n" | "\r" | "-" )+ <QUOTE>>
}

TOKEN :
{
	< LPAREN : "(" >
|	< RPAREN : ")" >
|	< LBRACE : "{" >
|	< RBRACE : "}" >
|	< LBRACKET : "[" >
|	< RBRACKET : "]" >
|	< SEMICOLON : ";" >
|	< COMMA : "," >
|	< DOT : "." >
|	< EQUALS : "=" >
|	< QUOTE : "\"" >
}



Graph parse() :
{
	Graph graph;
}
{
	graph = graphDef()
	{ return graph; }	  
}

Graph graphDef() :
{
	DefaultNodePropertiesElement defaultNodeProperties = null;
	DefaultEdgePropertiesElement defaultEdgeProperties = null;
	DefaultGraphPropertiesElement defaultGraphProperties = null;
	Graph graph = new Graph();
	List<Element> elements;
	Token t;
}
{
	(<STRICT>)?
	(
			<GRAPH> { graph.setType(Graph.GraphType.UNDIRECTED); }
		|	<DIGRAPH> { graph.setType(Graph.GraphType.DIRECTED); }
	)
	(t = <IDENTIFIER> {	graph.setLabel(t.image);} )?
	elements = statementList()
	{
		for (Element e : elements) {
			if (e instanceof DefaultNodePropertiesElement) {
				defaultNodeProperties = (DefaultNodePropertiesElement) e;
			}
			if (e instanceof DefaultEdgePropertiesElement) {
				defaultEdgeProperties = (DefaultEdgePropertiesElement) e;
			}
			if (e instanceof DefaultGraphPropertiesElement) {
				defaultGraphProperties = (DefaultGraphPropertiesElement) e;
			}
		}
	
		for (Element e : elements) {
			Map<String, Object> nodeAttributes = (defaultNodeProperties == null) ? null : defaultNodeProperties.getAttributes();
			Map<String, Object> edgeAttributes = (defaultEdgeProperties == null) ? null : defaultEdgeProperties.getAttributes();
			Map<String, Object> graphAttributes = (defaultGraphProperties == null) ? null : defaultGraphProperties.getAttributes();
			if (e instanceof Node && nodeAttributes != null) {
				for (String name : nodeAttributes.keySet()) {
					if (! e.containsAttribute(name)) {
						e.setAttribute(name, nodeAttributes.get(name));
					}
				}
			}
			if (e instanceof Edge && edgeAttributes != null) {
				for (String name : edgeAttributes.keySet()) {
					if (! e.containsAttribute(name)) {
						e.setAttribute(name, edgeAttributes.get(name));
					}
				}
			}
			if (e instanceof Graph && graphAttributes != null) {
				for (String name : graphAttributes.keySet()) {
					if (! e.containsAttribute(name)) {
						e.setAttribute(name, graphAttributes.get(name));
					}
				}
			}
		}
				
		graph.removeElement(defaultNodeProperties);
		graph.removeElement(defaultEdgeProperties);
		graph.removeElement(defaultGraphProperties);

		for (Element e : elements) {
			graph.addElement(e);
		}
	
		return graph;
	}
}

List<Element> statementList() :
{
	List<Element> elements = new ArrayList<Element>();
	List<Element> statementElements;
}
{
	<LBRACE>
	(
		statementElements = statement() <SEMICOLON>
		{
			elements.addAll(statementElements);
		}
	)*
	(
		statementElements = statement()
		{
			elements.addAll(statementElements);
		}
	)?
	<RBRACE>
	{ return elements; }
}


List<Element> statement() :
{
	List<Element> elements = null;
	Element element = null;
}
{
	(
			element = defaultNodeDef()
		|	element = defaultEdgeDef()
		|	element = defaultGraphDef()
		|	element = subgraphDef()
		|	LOOKAHEAD(<NODEIDENT> <DIRECTED_EDGE>) elements = linkDef()
		|	LOOKAHEAD(<NODEIDENT> <EDGE>) elements = linkDef()
		|	element = nodeDef()
	)
	{
		if (element != null) {
			elements = new ArrayList<Element>(1);
			elements.add(element);
		}

		return elements;
	}
}

List<Property> attributeList() :
{
	List<Property> properties = new ArrayList<Property>();
	Property property;
}
{
	<LBRACKET>
	property = attributeDef() { properties.add(property); }
	(<COMMA> property = attributeDef() { properties.add(property); })*
	<RBRACKET>
	
	{ return properties; }
}

Property attributeDef() :
{
	Property property = null;
	Token name, value;
}
{
		name = <IDENTIFIER> <EQUALS> value = <STRING>
		{
			property = new Property();
			property.setName(name.image);
			property.setValue(value.image.substring(1, value.image.length() - 1));
			return property;
		}
}

Graph subgraphDef() :
{
	Graph graph = new Graph();
	List<Element> elements;
	Token name;
}
{
	<SUBGRAPH>
	(
		name = <IDENTIFIER>
		{
			graph.setLabel(name.image);
		}
	)?
	elements = statement() 
	{
		for (Element e : elements) {
			graph.addElement(e);
		}
		return graph;
	}
}

DefaultNodePropertiesElement defaultNodeDef() :
{
	DefaultNodePropertiesElement defaultProperties = new DefaultNodePropertiesElement();
	List<Property> properties;
}
{
		<DEFAULT_PROPERTY_NODE> properties = attributeList()
		{
			for (Property property : properties) {
				defaultProperties.setAttribute(property);
			}
			return defaultProperties;
		}
}

DefaultEdgePropertiesElement defaultEdgeDef() :
{
	DefaultEdgePropertiesElement defaultProperties = new DefaultEdgePropertiesElement();
	List<Property> properties;
}
{
		<DEFAULT_PROPERTY_EDGE> properties = attributeList()
		{
			for (Property property : properties) {
				defaultProperties.setAttribute(property);
			}
			return defaultProperties;
		}
}

DefaultGraphPropertiesElement defaultGraphDef() :
{
	DefaultGraphPropertiesElement defaultProperties = new DefaultGraphPropertiesElement();
	List<Property> properties;
}
{
		<GRAPH> properties = attributeList()
		{
			for (Property property : properties) {
				defaultProperties.setAttribute(property);
			}
			return defaultProperties;
		}
}


Node nodeDef() :
{
	Node node = new Node();
	List<Property> properties;
	Token t = null;
}
{
	t = <NODEIDENT>	{ node.setLabel(t.image); }
	properties = attributeList()
	{
		for (Property property : properties) {
			node.setAttribute(property);
		} 
		return node;
	}
}

List<Element> linkDef() :
{
	List<Element> edges = new ArrayList<Element>();
	List<Property> properties;
	DirectedEdge directedEdge = null;
	Edge edge = null;
	Node node1 = null;
	Node node2 = null;
	Token srcNodeName;
	Token destNodeName;
}
{
	srcNodeName = <NODEIDENT> {
		node1 = new Node();
		node1.setLabel(srcNodeName.image);		
	}
	(
		(				<EDGE> { edge = new Edge(); }
			|	<DIRECTED_EDGE> { directedEdge = new DirectedEdge(); edge = directedEdge; }
		)
		destNodeName = <NODEIDENT> {
			node2 = new Node();
			node2.setLabel(destNodeName.image);		
		}
		{
			if (directedEdge != null) {
				directedEdge.addNode(node1, DirectedEdge.NodeType.SOURCE);
				directedEdge.addNode(node2, DirectedEdge.NodeType.DEST);
			} else {
				edge.addNode(node1);
				edge.addNode(node2);
			}
			node1 = node2;
			node2 = null;
			edges.add(edge);
		}
	)+
	properties = attributeList()
	{
		for (Element element : edges) {
			Edge e = (Edge) element;
			for (Property property : properties) {
				e.setAttribute(property);
			}
		} 
		return edges;
	}
}
