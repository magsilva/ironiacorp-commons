options
{
		JDK_VERSION = "1.5";
		CACHE_TOKENS = true;
		DEBUG_LOOKAHEAD = false;
		DEBUG_PARSER = false;
		DEBUG_TOKEN_MANAGER = false;
		ERROR_REPORTING = false;
		IGNORE_CASE = false;
		SANITY_CHECK = true;
		STATIC = false;
		SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
}

PARSER_BEGIN(DotParser)
package com.ironiacorp.graph.parser.dot;

import java.util.*;
import java.util.regex.Matcher;
import com.ironiacorp.graph.model.*;
import com.ironiacorp.graph.rendering.*;

public class DotParser
{
	public class DefaultPropertiesElement extends Element {};

	private Graph graph;
}

PARSER_END(DotParser)

SKIP :
{
	" " | "\t" | "\n" | "\r" | "\f"
}

TOKEN :
{
	< GRAPH : "graph" >
|	< DIGRAPH : "digraph" >
|	< SUBGRAPH : "subgraph" >
|	< NODE : "node" >
|	< DIRECTED_EDGE : "->" >
|	< EDGE : "--" >
}

TOKEN :
{
	<#LETTER : [ "A"-"Z", "_", "a"-"z" ]>
|	<#DIGIT : [ "0"-"9" ]>
|	<NODEIDENT : (<DIGIT>)+>
|	<IDENTIFIER :	<LETTER>  (<LETTER>	| <DIGIT>)* >
|	<STRING :	<QUOTE> ( <LETTER> | <DIGIT> | "\\" | "." | "," | " " | "\n" | "\r" | "-" )+ <QUOTE>>
}

TOKEN :
{
	< LPAREN : "(" >
|	< RPAREN : ")" >
|	< LBRACE : "{" >
|	< RBRACE : "}" >
|	< LBRACKET : "[" >
|	< RBRACKET : "]" >
|	< SEMICOLON : ";" >
|	< COMMA : "," >
|	< DOT : "." >
|	< EQUALS : "=" >
|	< QUOTE : "\"" >
}



void parse() :
{}
{
	graphDef()	  
}

Graph graphDef() :
{
	Graph graph = new Graph();
	Element element;
	Token t;
}
{
	(
			<GRAPH> { graph.setType(GraphType.UNDIRECTED); }
		|	<DIGRAPH> { graph.setType(GraphType.DIRECTED); }
	)
	(<IDENTIFIER>)? <LBRACE>
	(
		element = statement() <SEMICOLON>
		{ graph.addElement(element); }
	)*
	(
		element = statement() (<SEMICOLON>)?
		{ graph.addElement(element); }
	) <RBRACE>
	{ return graph; }
}


Element statement() :
{
	Element element;
}
{
	(
			element = defaultNode()
		|	element = subgraphDef()
		|	element = nodeDef()
		|	LOOKAHEAD(<NODEIDENT> <DIRECTED_EDGE>) element = linkDef()
		|	element = atribute()
	)
	{ return element; }
}


void defaultNode() :
{
	DefaultPropertiesElement defaultProperties = new DefaultPropertiesElement();
}
{
		<NODE> atributeList(defaultProperties)
		{ return defaultProperties; }
}

void atributeList(Element element) :
{}
{
		<LBRACKET> atributeDef(element) (<COMMA> atributeDef(element))* <RBRACKET>
}

void atributeDef(Element element) :
{
	Token id, value;
}
{
		id = <IDENTIFIER> <EQUALS> value = <STRING>
		{
			element.setProperty(id, value);
		}
}


Node nodeDef() :
{
	Node node = new Node();
	Token t = null;
}
{
	t = <NODEIDENT>	{ node.setLabel(t.image); } attributeList(node)
	{ return node; }
}

List<Edge> linkDef() :
{
	List<Edge> edges = new ArrayList<Edge>();
	DirectedEdge directedEdge = null;
	Edge edge = null;
	Node node1 = null;
	Node node2 = null;
	Token srcNodeName;
	Token destNodeName;
	Token edgeType;
}
{
	srcNodeName = <NODEIDENT> {
		node1 = new Node();
		node1.setLabel(srcNodeName.image);		
	}
	(
		edgeType = (
				<EDGE> { edge = new Edge(); }
			|	<DIRECTED_EDGE> { directedEdge = new DirectedEdge(); edge = directedEdge; }
		)
		destNode = <NODEIDENT> {
			node2 = new Node();
			node2.setLabel(srcNodeName.image);		
		}
		{
			if (directedEdge != null) {
				directedEdge.addNode(node1, NodeType.SOURCE);
				directedEdge.addNode(node2, NodeType.DEST);
			} else {
				edge.addNode(node1);
				edge.addNode(node2);
			}
			node1 = node2;
			node2 = null;
			edges.add(edge);
		}
	)+
	attributeList(edge)
	{ return edge; }
}
